Клієнт-серверна архутектура
Півторак Юрій Олександрович
Нік в телеграмі : Yurii Pivtorak

1) Прочиать про клиент-серверную архитектуру
   Клієнт-серверна архітектура - це взаємодія трьох частин: Бази данних, Контроллера (сервер який відповідає за логіку)
 та Представлення. Розрізняють дворівневу (клієнт і сервер), трирівневу (клієнт, сервер та база данних)
 та багаторівневу архітектуру (до всього додаються балансувальники DNS та Proxy сервера).
 Сервер - це потужна віддалена машина, основною задачею якої виступає обробка відповідних логічних дій. Сукупність серверів 
називають Кластером. Кластери бувають двох видів (Activ-Activ та Actip-Pasiv). За представлення відповідає клієнт. 
Просту логіку яка не взаємодіє з даними часто перекладають на клієнт - тоді такого  клієнта називають "Тонкий клієнт".
 Коли ж всю логіку переносять на Клієнт, а на сервері залишаються лише дані, то такого клієнта називають "Товстий клієнт".
Клієнт - це софт, ПО яке знаходиться на ПК, наприклад Браузер чи додаток на телефоні.
Завдання клієнта - відправити запит на сервер та отримати відповідь з сервера, зрозуміти її та відобразити. 
З сервера приходить відповідь у вигляді коду в HTML документі, Css стилі, java script-и та файли. Дані передаються малими порціями - пакетами. 
Клієнт взаємодіє із сервером за певними правилами, вони мають назву "протоколи".

2) Что ткое HTTP и HTTPS
   HTTP (Hyper Text Transfer Protocol) - це протокол передачі данних прикладного рівня. По HTTP передається гіпер текст. 
Гіпертекст - це текст що містить в собі активні посилання. HTTP використовує у своїй роботі 80 порт, HTTPS - 443. HTTP протокол
вважається простим, оскільки є зрозумілим для людини - це звичайний текст. HTTP протокол вважається розшируваним - безліч хедерів та заголовків 
можна розширювати запити скільки потрібно. HTTP протокол не має стану,а лише має сесію (вона зберігається в cookies), бо це набір запитів та відповідей.
HTTP - вважається безпечним бо немає стану. У запитах клієнт відправляє cookies, так сервер розуміє, що запит здійснено у межах однієї сесії.
HTTPS - це HTTP + Secure протокол, який быльш захищений ніж звичайний HTTP. SSL - це сертифікат безпеки на сервері (працював до 2015 року).
SSL/TLS - Це народна нова назва сертифікату безпеки TLS. Основні його функції: шифрування данних; перевірка цілісності повідомлення; аутентифікація.
Схема спілкування клієнт сервер по HTTPS  протоколу: Клієнт передає серверу інформацію про підтримувану версію TLS та шифрування. Сервер передає клієнту
 свій сертифікат метод шифрування та ключ. Клієнт перевіряє сертифікат у центрі сертифікації. Клієнт генерує свій ключ, (до версії TLS 1.3) та передає його 
на сервер. Після обміну ключам та паролями спілкування є безпечним.

3) HTTP методы
   HTTP запит складається із методу, версії протоколу, хочту на який відправляється запит, розділювача між стрічками (\r\n) пустої стрічки, заголовка 
та тіла, яке не є обов'язковим. Розрізняють 9 основних методів: 
- GET - метод для отримання чогось ыз сервера. Не містить тіла запиту.
- POST - служить для відправки інформації на сервер. Обов'язково містить тіло.
- PUT - для зміни уже дійсної інформації на сервері. Обов'язково містить тіло.
- HEAD - для отримання інформації із сервера без тіла. Поверне лише заголовки.
- DELETE- для видалення дійсної інформації із сервера.
- PATCH - дає можливість замінити частину інформації на сервері.
- CONNECT - для установки тунелю до певного ресурсу на сервері.
- OPTIONS - для отримання із серверу певних налаштувань.
- TRACE - для перевірки зв'язку із цільовим ресурсом.Переважно використовується для наладки.
 HTTP відповідь із серверу обов'язково має містити статус код та Хедери.

4) HTTP статус коды сервера
   Існує 5 груп статус кодів 
 1. Інформаційні (100-199);
 2. Успішні опрації (200-299);
 3. Коди перенаправлення (300-399);
 4. Коди помилок зі сторони клієнта (400-499);
   400-Bed request;
   401-немає аутентифікації;
   404-page not faund (немає ресурсу);
   405-не вірний метод;
 5. Помилки зі сторони сервера (500-599);
  501- Не вірно оброблено метод;
  502 Bed geteway (невірно оброблено запит);   
  504-Time out (немає відповіді з серверу).

5) Что такое ядро браузера
   Використовуючи протокол HTTP браузер зв'язується із сервером і запрошує у нього потрібні сторінки та контент.
 Сервер відправляє клієнту сторінку HTML із зв'язаними ресурсами.Браузер аналізує код за допомогою встроєного модуля,
а потім відображає на екран контент. Після цього браузер виконує код клієнтських сценаріїв, що написаний на Java-script.
  Браузер складаэться із: 
-UI - користувацький інтерфейс (Меню, адресна строка, інші елементи);
-Internal engine - ядро браузера - Забезпечує взаємодію  UI компонентів і Модулем візуалізації та коорденує їх роботу.
-Rendering engine - Модуль візуалізації - використовується для синтаксичного аналізу HTML та CsS коду і відображення сторінок.
-Встроєний мережевий компонент - для мережевих операцій та кросплатформенного інтерфейсу.
-База данних - для управління сеансами та для зберігання налаштувань та данних cookies на диск ПК.
-Інтерпритатор Java-script - виконуэ отриманы скрипти.
 
6) Какие браузеры какиие ядра используют
   Існує 5 основних видів модулів Рендерингу:
 Trident - розробка Microsoft (Internet Explorer, Windows mobile, AOL Browsers) 
 GesKo - розробка NetScape містить відкритий код (Mozzila, Firefox OS)
 Presto - власна розробка Opera (до 13-ї версії), Opers mini, Opera mobile.
 Webkit - від Apple та Google (Safari, Web OS, Android до 4.4), містить відкритий код.
 Blink - браузер Chrome nf Opera від 14-ї версії. Android від 4.4+ версії.

7) Что такое API
   Aplication Programm Interface - це контракт який надає програма: "До мене можна звертатись так і я робитиму те.!"
 API надає можливість працювати з WEB сторінками навіть не відкриваючи їх, просто потрібно згенерувати та відправити
правильний запит. API - це інтерфейс взаємодії між програмами. Він працює на протоколах:
- REST - передача самоописування стану. (Representational state transfer) 
- SOAP - протокол доступу до об'єктів.
- RPC - віддалений виклик процедур.
Тестування API проводять на рівні Інтеграційного тестування. API дає змогу раннього тестування, UI може ще не бути,
 а API вже є і тестувальник може знайти дефекти на ранній стадії.  Тестування API - дає точну локалізацію дефекту.
Склад API запиту:
 - Request URL - це адреса на яку ми плануємо відправляти запит. 
 - Заголовки - дозволяють клієнту та серверу передавати додаткову інформацію у запиті чи відповіді. (Назва + значення)
 - Тип запиту ; 
 - Тіло запиту


8. Что такое ендпоинты
 Маршрут -це URL до якого можна звернутися різними HTTP методами. Маршрут може мати кілька Ендпоінтів.
Ендпоінт - це сам запит до маршруту окремим HTTP методом. Вони виконують конкретне завдання - приймають параметри та
повертають дані клієнта. GET, PUT, PATCH, DELETE.

9) URL (URI, URL, URN)
   URI (Uniform resourse identifier) - це адреса ресурсу  в мережі
   URL (Uniform resourse locator) - місце розташування ресурсу в мережі 
   URN (Uniform resourse name)- ім'я ресурсу в мережі.

10) Идемпотентные HTTP методы
   Імподентний метод - це метод при якому повторний ідентичний запит має оди і той же результат, що не змінює стан сервера.
GET, HEAD, PuT, DELETE.

11) Безопасные HTTP методы
  Метод HTTP є безпечним, якщо він не змінює стан сервера. Тобто безпечний метод виконує операції лише читання (read only).
 До таких методів можна віднести GET, HEAD, OPTIONS, Усі безпечні методи є імподентними, та не навпаки.     

12) Иденфикация, Аутентификация, Авторизация
 Ідентифікація - це процес перевірки уведеного ЛОГІНУ (ідентифікатора) користувача в форму,та звірка його як існуючого.
 Аутентифікація - це процес підтвердження користувача по введеному паролю.
 Авторизація - це процес представлення користувачу чи користувачам прав на виконання певних дій у своєму кабінеті.   

13) Что такое IP
   відповідно до 4-х рівневої моделі мереж TCP/IP:
 1. Канальний рівень
 2. Міжсітьовий рівень
 3. Транспортний рівень
 4. Прикладний рівень
На другому рівні об'єднуються локальні мережі. Виникає "маска підсіті" та протокол IP. IP - інтернет протокол - це адреса хоста до
якого ми хочемо отримати доступ. 

14) Что такое октеты в IP
   IP адреса складається з чотирьох частин записаних у вигляді десяткових чисел з крапками (192.168.1.1). Кожну з цих чотирьох частин
називають октетом. Октет являє собою 8 двійкових цифр 11000000 чи 192 у десятковому вигляді. Таким чином кожен октет може приймати в 
двійковому вигляді значення від 0 до 1 (00000000)(11111111) або від 0 до 255 у десятковому вигляді. Приклад: 192.168.1.16, де перші три октети - це номер 
сіті, а 4-й октет - 16- індикатор хоста.

15) Что такое порт, сколько портов у Linux сервера
   Порт - це ціле, невідємне число що міститься у заголовках протоколу Транспортного рівня мережевої моделі ОSI. За звичай на хості 
під керівництвом ОС в просторі користувача виконується кілька процесів, в ожному з яких виконується певна програма. У випадку коли кілька 
програм використовують комп'ютерну мережу то ОС періодично отримує по мережі IP-пакет, призначений для однієї з програм.
 Процес програми бажаючий обмінюватися даними по мережі може запросити в ОС в користування порт з номером (конкретним чи будьяким).
Коли процес отримав номер порта у ОС (відкрив порт) і тримає його відкритим, то кажуть, що порт "прослуховує"!
Теоретичний максимум кількості портів сягає більше 64тисяч на один клієнт. Та в цілому ця межа налаштовується.

16) Уровни OSI
 Модель мережі OSI має лише теоретичний характер, вона складається і з сімох рівнів:
 1. Фізичний рівень - працює протокол Wifi.
 2. Канальний рівень
 3. Мережевий рівень
 4. Транспортний рівень
 5. Сеансовий рівень
 6. Рівень представлення
 7. Прикладний рівень  

17) Хедеры http запросов
   Хедер що використовується у HTTP запиті - це заголовок запиту. Вони супроводжують обмін данними по протоколу.
 Заголовки допомагають серверу виконати умовні запити, (Accept) інші уточнюють контекст, щоб сервер міг адаптувати відповідь
до заявлених умов (User-agent, referer).
Заголовки дозволяють клієнту і серверу відправляти додаткову інформацію з HTTP запитом чи відповіддю. У HTTP запиті міститься чуттєве 
до регістру ім'я, а потім знак : безпосередньо значення.
Власні заголовки розробників часто можна зустріти із префіксом X- (до червня 2012року). Та оскільки нестандартні поля стали стандартом, 
створили реєстр хедерів IANA.
Заголовки можна згрупувати:
General - основні заголовки - використовуються як у Запитах так і у Відповідях, та не мають відношення до данних.
   URL, METHOD, Code, Adrres,Preferrer Policy.
Request - заголовки запиту - містить більше інформації про ресурс, який потрібно отримати, чи про клієнта, що робить запит.  
   HOST, USER-AGENT, Accept */*(типи данних), Conection, Encoding, Authorization, 
   Content-type - у якому вигляді інформацію ми хочемо отримати.
Response - заголовки відповіді містять додаткову інформацію про відповідь, наприклад його місце знаходження, чи про сервер, який відповів.
   Server, Data, Content-type, Conection.
